{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('../uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nconst cspHeaders = [\n    'cross-origin-embedder-policy',\n    'cross-origin-opener-policy',\n    'cross-origin-resource-policy',\n    'content-security-policy',\n    'content-security-policy-report-only',\n    'expect-ct',\n    'feature-policy',\n    'origin-isolation',\n    'strict-transport-security',\n    'upgrade-insecure-requests',\n    'x-content-type-options',\n    'x-download-options',\n    'x-frame-options',\n    'x-permitted-cross-domain-policies',\n    'x-powered-by',\n    'x-xss-protection',\n];\nconst emptyMethods = ['GET', 'HEAD'];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n    constructor(config = __uv$config) {\n        super();\n        if (!config.bare) config.bare = '/bare/';\n        if (!config.prefix) config.prefix = '/service/';\n        this.config = config;\n        const addresses = (\n            Array.isArray(config.bare) ? config.bare : [config.bare]\n        ).map((str) => new URL(str, location).toString());\n        this.address = addresses[~~(Math.random() * addresses.length)];\n        /**\n         * @type {InstanceType<Ultraviolet['BareClient']>}\n         */\n        this.bareClient = new Ultraviolet.BareClient(this.address);\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    async fetch({ request }) {\n        /**\n         * @type {string|void}\n         */\n        let fetchedURL;\n\n        try {\n            if (!request.url.startsWith(location.origin + this.config.prefix))\n                return await fetch(request);\n\n            const ultraviolet = new Ultraviolet(this.config, this.address);\n\n            if (typeof this.config.construct === 'function') {\n                this.config.construct(ultraviolet, 'service');\n            }\n\n            const db = await ultraviolet.cookie.db();\n\n            ultraviolet.meta.origin = location.origin;\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\n                ultraviolet.sourceUrl(request.url)\n            );\n\n            const requestCtx = new RequestContext(\n                request,\n                this,\n                ultraviolet,\n                !emptyMethods.includes(request.method.toUpperCase())\n                    ? await request.blob()\n                    : null\n            );\n\n            if (ultraviolet.meta.url.protocol === 'blob:') {\n                requestCtx.blob = true;\n                requestCtx.base = requestCtx.url = new URL(\n                    requestCtx.url.pathname\n                );\n            }\n\n            if (\n                request.referrer &&\n                request.referrer.startsWith(location.origin)\n            ) {\n                const referer = new URL(\n                    ultraviolet.sourceUrl(request.referrer)\n                );\n\n                if (\n                    requestCtx.headers.origin ||\n                    (ultraviolet.meta.url.origin !== referer.origin &&\n                        request.mode === 'cors')\n                ) {\n                    requestCtx.headers.origin = referer.origin;\n                }\n\n                requestCtx.headers.referer = referer.href;\n            }\n\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n            const cookieStr = ultraviolet.cookie.serialize(\n                cookies,\n                ultraviolet.meta,\n                false\n            );\n\n            requestCtx.headers['user-agent'] = navigator.userAgent;\n\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n            const reqEvent = new HookEvent(requestCtx, null, null);\n            this.emit('request', reqEvent);\n\n            if (reqEvent.intercepted) return reqEvent.returnValue;\n\n            fetchedURL = requestCtx.blob\n                ? 'blob:' + location.origin + requestCtx.url.pathname\n                : requestCtx.url;\n\n            const response = await this.bareClient.fetch(fetchedURL, {\n                headers: requestCtx.headers,\n                method: requestCtx.method,\n                body: requestCtx.body,\n                credentials: requestCtx.credentials,\n                mode:\n                    location.origin !== requestCtx.address.origin\n                        ? 'cors'\n                        : requestCtx.mode,\n                cache: requestCtx.cache,\n                redirect: requestCtx.redirect,\n            });\n\n            const responseCtx = new ResponseContext(requestCtx, response);\n            const resEvent = new HookEvent(responseCtx, null, null);\n\n            this.emit('beforemod', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            for (const name of cspHeaders) {\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\n            }\n\n            if (responseCtx.headers.location) {\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\n                    responseCtx.headers.location\n                );\n            }\n\n            // downloads\n            if (request.destination === 'document') {\n                const header = responseCtx.headers['content-disposition'];\n\n                // validate header and test for filename\n                if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n                    // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\n                    // if it's invalid then we can still possibly test for the attachment/inline type\n                    const type = /^\\s*?attachment/i.test(header)\n                        ? 'attachment'\n                        : 'inline';\n\n                    // set the filename\n                    const [filename] = new URL(response.finalURL).pathname\n                        .split('/')\n                        .slice(-1);\n\n                    responseCtx.headers[\n                        'content-disposition'\n                    ] = `${type}; filename=${JSON.stringify(filename)}`;\n                }\n            }\n\n            if (responseCtx.headers['set-cookie']) {\n                Promise.resolve(\n                    ultraviolet.cookie.setCookies(\n                        responseCtx.headers['set-cookie'],\n                        db,\n                        ultraviolet.meta\n                    )\n                ).then(() => {\n                    self.clients.matchAll().then(function (clients) {\n                        clients.forEach(function (client) {\n                            client.postMessage({\n                                msg: 'updateCookies',\n                                url: ultraviolet.meta.url.href,\n                            });\n                        });\n                    });\n                });\n                delete responseCtx.headers['set-cookie'];\n            }\n\n            if (responseCtx.body) {\n                switch (request.destination) {\n                    case 'script':\n                    case 'worker':\n                        {\n                            // craft a JS-safe list of arguments\n                            const scripts = [\n                                ultraviolet.bundleScript,\n                                ultraviolet.clientScript,\n                                ultraviolet.configScript,\n                                ultraviolet.handlerScript,\n                            ]\n                                .map((script) => JSON.stringify(script))\n                                .join(',');\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\n                                this.address,\n                                this.bareClient.manifest,\n                                ultraviolet.cookie.serialize(\n                                    cookies,\n                                    ultraviolet.meta,\n                                    true\n                                ),\n                                request.referrer\n                            )} importScripts(${scripts}); }\\n`;\n                            responseCtx.body += ultraviolet.js.rewrite(\n                                await response.text()\n                            );\n                        }\n                        break;\n                    case 'style':\n                        responseCtx.body = ultraviolet.rewriteCSS(\n                            await response.text()\n                        );\n                        break;\n                    case 'iframe':\n                    case 'document':\n                        if (\n                            isHtml(\n                                ultraviolet.meta.url,\n                                responseCtx.headers['content-type'] || ''\n                            )\n                        ) {\n                            responseCtx.body = ultraviolet.rewriteHtml(\n                                await response.text(),\n                                {\n                                    document: true,\n                                    injectHead: ultraviolet.createHtmlInject(\n                                        ultraviolet.handlerScript,\n                                        ultraviolet.bundleScript,\n                                        ultraviolet.clientScript,\n                                        ultraviolet.configScript,\n                                        this.address,\n                                        this.bareClient.manifest,\n                                        ultraviolet.cookie.serialize(\n                                            cookies,\n                                            ultraviolet.meta,\n                                            true\n                                        ),\n                                        request.referrer\n                                    ),\n                                }\n                            );\n                        }\n                }\n            }\n\n            if (requestCtx.headers.accept === 'text/event-stream') {\n                responseCtx.headers['content-type'] = 'text/event-stream';\n            }\n            if (crossOriginIsolated) {\n                responseCtx.headers['Cross-Origin-Embedder-Policy'] =\n                    'require-corp';\n            }\n\n            this.emit('response', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            return new Response(responseCtx.body, {\n                headers: responseCtx.headers,\n                status: responseCtx.status,\n                statusText: responseCtx.statusText,\n            });\n        } catch (err) {\n            if (!['document', 'iframe'].includes(request.destination))\n                return new Response(undefined, { status: 500 });\n\n            console.error(err);\n\n            return renderError(err, fetchedURL, this.address);\n        }\n    }\n    static Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n    /**\n     *\n     * @param {RequestContext} request\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\n     */\n    constructor(request, response) {\n        this.request = request;\n        this.raw = response;\n        this.ultraviolet = request.ultraviolet;\n        this.headers = {};\n        // eg set-cookie\n        for (const key in response.rawHeaders)\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n    }\n    get url() {\n        return this.request.url;\n    }\n    get base() {\n        return this.request.base;\n    }\n    set base(val) {\n        this.request.base = val;\n    }\n}\n\nclass RequestContext {\n    /**\n     *\n     * @param {Request} request\n     * @param {UVServiceWorker} worker\n     * @param {Ultraviolet} ultraviolet\n     * @param {BodyInit} body\n     */\n    constructor(request, worker, ultraviolet, body = null) {\n        this.ultraviolet = ultraviolet;\n        this.request = request;\n        this.headers = Object.fromEntries(request.headers.entries());\n        this.method = request.method;\n        this.address = worker.address;\n        this.body = body || null;\n        this.cache = request.cache;\n        this.redirect = request.redirect;\n        this.credentials = 'omit';\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\n        this.blob = false;\n    }\n    get url() {\n        return this.ultraviolet.meta.url;\n    }\n    set url(val) {\n        this.ultraviolet.meta.url = val;\n    }\n    get base() {\n        return this.ultraviolet.meta.base;\n    }\n    set base(val) {\n        this.ultraviolet.meta.base = val;\n    }\n}\n\nfunction isHtml(url, contentType = '') {\n    return (\n        (\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\n            'text/html'\n        ).split(';')[0] === 'text/html'\n    );\n}\n\nclass HookEvent {\n    #intercepted;\n    #returnValue;\n    constructor(data = {}, target = null, that = null) {\n        this.#intercepted = false;\n        this.#returnValue = null;\n        this.data = data;\n        this.target = target;\n        this.that = that;\n    }\n    get intercepted() {\n        return this.#intercepted;\n    }\n    get returnValue() {\n        return this.#returnValue;\n    }\n    respondWith(input) {\n        this.#returnValue = input;\n        this.#intercepted = true;\n    }\n}\n\n/**\n *\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction hostnameErrorTemplate(fetchedURL, bareServer) {\n    const parsedFetchedURL = new URL(fetchedURL);\n    const script =\n        `remoteHostname.textContent = ${JSON.stringify(\n            parsedFetchedURL.hostname\n        )};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `uvHostname.textContent = ${JSON.stringify(location.hostname)};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        '<h1>This site can\u2019t be reached</h1>' +\n        '<hr />' +\n        '<p><b id=\"remoteHostname\"></b>\u2019s server IP address could not be found.</p>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verifying the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n *\n * @param {string} title\n * @param {string} code\n * @param {string} id\n * @param {string} message\n * @param {string} trace\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction errorTemplate(\n    title,\n    code,\n    id,\n    message,\n    trace,\n    fetchedURL,\n    bareServer\n) {\n    // produced by bare-server-node\n    if (message === 'The specified host could not be resolved.')\n        return hostnameErrorTemplate(fetchedURL, bareServer);\n\n    // turn script into a data URI so we don't have to escape any HTML values\n    const script =\n        `errorTitle.textContent = ${JSON.stringify(title)};` +\n        `errorCode.textContent = ${JSON.stringify(code)};` +\n        (id ? `errorId.textContent = ${JSON.stringify(id)};` : '') +\n        `errorMessage.textContent =  ${JSON.stringify(message)};` +\n        `errorTrace.value = ${JSON.stringify(trace)};` +\n        `fetchedURL.textContent = ${JSON.stringify(fetchedURL)};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\n            location.hostname\n        )};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        \"<h1 id='errorTitle'></h1>\" +\n        '<hr />' +\n        '<p>Failed to load <b id=\"fetchedURL\"></b></p>' +\n        '<p id=\"errorMessage\"></p>' +\n        '<table><tbody>' +\n        '<tr><td>Code:</td><td id=\"errorCode\"></td></tr>' +\n        (id ? '<tr><td>ID:</td><td id=\"errorId\"></td></tr>' : '') +\n        '</tbody></table>' +\n        '<textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Checking your internet connection</li>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verify the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<p>If you\\'re the administrator of <b id=\"uvHostname\"></b>, try:</p>' +\n        '<ul>' +\n        '<li>Restarting your Bare server</li>' +\n        '<li>Updating Ultraviolet</li>' +\n        '<li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>' +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n * @typedef {import(\"@tomphttp/bare-client\").BareError} BareError\n */\n\n/**\n *\n * @param {unknown} err\n * @returns {err is BareError}\n */\nfunction isBareError(err) {\n    return err instanceof Error && typeof err.body === 'object';\n}\n\n/**\n *\n * @param {unknown} err\n * @param {string} fetchedURL\n * @param {string} bareServer\n */\nfunction renderError(err, fetchedURL, bareServer) {\n    /**\n     * @type {number}\n     */\n    let status;\n    /**\n     * @type {string}\n     */\n    let title;\n    /**\n     * @type {string}\n     */\n    let code;\n    let id = '';\n    /**\n     * @type {string}\n     */\n    let message;\n\n    if (isBareError(err)) {\n        status = err.status;\n        title = 'Error communicating with the Bare server';\n        message = err.body.message;\n        code = err.body.code;\n        id = err.body.id;\n    } else {\n        status = 500;\n        title = 'Error processing your request';\n        message = 'Internal Server Error';\n        code = err instanceof Error ? err.name : 'UNKNOWN';\n    }\n\n    return new Response(\n        errorTemplate(\n            title,\n            code,\n            id,\n            message,\n            String(err),\n            fetchedURL,\n            bareServer\n        ),\n        {\n            status,\n            headers: {\n                'content-type': 'text/html',\n            },\n        }\n    );\n}\n"],
  "mappings": "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",
  "names": []
}
